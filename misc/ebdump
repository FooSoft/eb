#! /usr/bin/perl
#
# Copyright (c) 2004-2006  Motoyuki Kasahara
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

#
# Parse command line arguments.
#
die "usage: $0 file page[:offset]\n" if (@ARGV != 2);

$file = $ARGV[0];
if ($ARGV[1] =~ /^([0-9a-fA-F]+)$/) {
    $offset = (hex($1) - 1) * 2048;
} elsif ($ARGV[1] =~ /^([0-9a-fA-F]+):([0-9a-fA-F]+)$/) {
    $offset = (hex($1) - 1) * 2048 + hex($2);
} else {
    die "$0: invalid offset\n";
}
die "$0: invalid offset\n" if ($offset < 0);

#
# Open a file.
#
open(FILE, $file) || die "$0: failed to open the file, $!: $file.\n";
seek(FILE, $offset, 0) || die "$0: failed to seek the file, $!: $file.\n";

#
# Read the file.
#
$count = 0;
while ($count < 2048) {
    last if (read(FILE, $buf, 16) != 16);
    @data = unpack("C16", $buf);
    printf '%04x:%03x  ', $offset / 2048 + 1, $offset % 2048;
    for ($i = $0; $i < 16; $i += 2) {
	printf('%02x%02x', $data[$i], $data[$i + 1]);
    }
    print '  ';
    for ($i = $0; $i < 16; $i += 2) {
	if (0x21 <= $data[$i] && $data[$i] <= 0x7e
	    && 0x21 <= $data[$i + 1] && $data[$i + 1] <= 0x7e) {
		printf('[%c%c]', $data[$i] | 0x80, $data[$i + 1] | 0x80);
	} else {
		printf('%02x%02x', $data[$i], $data[$i + 1]);
	}
    }
    print "\n";
    $offset += 16;
    $count += 16;
}

#
# Close the file.
#
close(FILE);
